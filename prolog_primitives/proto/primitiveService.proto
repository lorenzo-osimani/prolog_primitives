syntax = "proto3";

option java_multiple_files = true;
option java_package = "it.unibo.tuprolog.primitives";
option java_outer_classname = "PaaS";

package primitives;

import "basicMessages.proto";

service GenericPrimitiveService {
  rpc callPrimitive(stream SolverMsg) returns (stream GeneratorMsg) {}
  rpc getSignature(EmptyMsg) returns (SignatureMsg) {}
}

message GeneratorMsg {
  oneof msg {
    ResponseMsg response = 1;
    SubRequestMsg request = 2;
  }
}

message SolverMsg {
  oneof msg {
    RequestMsg request = 1;
    EmptyMsg next = 2;
    SubResponseMsg response = 3;
  }
}

message RequestMsg {
  SignatureMsg signature = 1;
  repeated ArgumentMsg arguments = 2;
  ExecutionContextMsg context = 3;
  int64 start_time = 4;
  int64 max_duration = 5;
}

import "sideEffectsMessages.proto";

message ResponseMsg {
  SolutionMsg solution = 1;
  repeated SideEffectMsg sideEffects = 3;
}

message SolutionMsg {
  SolutionType type = 1;
  StructMsg query = 2;
  map<string, ArgumentMsg> substitutions = 3;
  optional ErrorMsg error = 4;
  bool hasNext = 5;
  enum SolutionType {
    SUCCESS = 0;
    FAIL = 1;
    HALT = 2;
  }
}

import "errorsMessages.proto";

message ErrorMsg {
  optional string message = 1;
  optional ErrorMsg cause = 2;
  ExecutionContextMsg context = 3;
  oneof error {
    InitializationIssueMsg initializationIssue = 4;
    MissingPredicateMsg missingPredicate = 5;
    HaltExceptionMsg haltException = 6;
    LogicErrorMsg logicError = 7;
    ResolutionExceptionMsg resolutionException = 8;
    TimeOutExceptionMsg timeoutException = 9;
  }
}

//SubRequests Messages
message SubRequestMsg {
  string id = 1;
  oneof request {
    SubSolveRequest subSolve = 2;
    ReadLineMsg readLine = 3;
    InspectKbMsg inspectKb = 4;
    GenericGetMsg genericGet = 5;
  }
}

message SubResponseMsg {
  string id = 1;
  oneof response {
    ResponseMsg solution = 2;
    LineMsg line = 3;
    StructMsg clause = 4;
    GenericGetResponse genericGet = 5;
  }
}

//SubSolve Messages
message SubSolveRequest {
  StructMsg query = 1;
  optional int64 timeout = 2;
  optional bool lazy = 3;
  optional int32 limit = 4;
}


//ReadLine Messages
message ReadLineMsg {
  string channelName = 1;
}

message LineMsg {
  string channelName = 1;
  oneof result {
    bool failed = 2;
    string content = 3;
  }
}

//Inspect KB Messages
message InspectKbMsg {
  enum KbType {
    STATIC = 0;
    DYNAMIC = 1;
    BOTH = 2;
  }

  enum FilterType {
    CONTAINS_TERM = 0;
    STARTS_WITH = 1;
    CONTAINS_FUNCTOR = 2;
  }

  message FilterMsg {
    FilterType type = 1;
    string argument = 2;
  }

  KbType kbType = 1;
  optional int64 maxClauses = 2;
  repeated FilterMsg filters = 3;
}

//Generic Get Message
message GenericGetMsg {
  enum Element {
    LOGIC_STACKTRACE = 0;
    CUSTOM_DATA_STORE = 1;
    UNIFICATOR = 2;
    LIBRARIES = 3;
    FLAGS = 4;
    OPERATORS = 5;
    INPUT_CHANNELS = 6;
    OUTPUT_CHANNELS = 7;
  }

  Element element = 1;
}

message GenericGetResponse {
  oneof result {
    LogicStacktraceMsg logicStackTrace = 5;
    CustomDataMsg customDataStore = 6;
    UnificatorMsg unificator = 7;
    LibrariesMsg libraries = 8;
    FlagsMsg flags = 9;
    OperatorSetMsg operators = 10;
    ChannelsMsg channels = 11;
  }
}
